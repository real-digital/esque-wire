from typing import overload

from .protocol.api_call import ApiCall
from .protocol.structs.api import (
{%- for api in all_apis %}
    {%- for direction in Direction %}
    {{ api.latest_schema_pair[direction].schema.name }},
    {%- endfor %}
{%- endfor %}
)
from .protocol.structs.base import RequestData

class BaseBrokerConnection:

    {% for api in all_apis -%}
    {% set request_data_name = api.latest_schema_pair[Direction.REQUEST].schema.name -%}
    {% set response_data_name = api.latest_schema_pair[Direction.RESPONSE].schema.name %}
    @overload
    def send(self, request_data: {{ request_data_name }}) -> ApiCall[{{ request_data_name }}, {{ response_data_name }}]: ...
    {% endfor %}
    def send(self, request_data: RequestData) -> ApiCall:
        return self._send(request_data)

    def _send(self, request_data: RequestData) -> ApiCall:
        raise NotImplementedError()