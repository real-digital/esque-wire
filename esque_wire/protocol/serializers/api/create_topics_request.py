##############################################
# Autogenerated module. Please don't modify. #
##############################################

from typing import Dict
from esque_wire.protocol.structs.create_topics_request import (
    Assignment,
    Config,
    CreateTopicsRequestData,
    Topic,
)

from esque_wire.protocol.serializers import (
    ArraySerializer,
    DataClassSerializer,
    DummySerializer,
    Schema,
    booleanSerializer,
    int16Serializer,
    int32Serializer,
    nullableStringSerializer,
    stringSerializer,
)


configSchemas: Dict[int, Schema] = {
    0: [
        ('name', stringSerializer),
        ('value', nullableStringSerializer),
    ],
    1: [
        ('name', stringSerializer),
        ('value', nullableStringSerializer),
    ],
    2: [
        ('name', stringSerializer),
        ('value', nullableStringSerializer),
    ],
    3: [
        ('name', stringSerializer),
        ('value', nullableStringSerializer),
    ],
}


configSerializers: Dict[int, DataClassSerializer[Config]] = {
    version: DataClassSerializer(Config, schema) for version, schema
    in configSchemas.items()
}


assignmentSchemas: Dict[int, Schema] = {
    0: [
        ('partition_index', int32Serializer),
        ('broker_ids', ArraySerializer(int32Serializer)),
    ],
    1: [
        ('partition_index', int32Serializer),
        ('broker_ids', ArraySerializer(int32Serializer)),
    ],
    2: [
        ('partition_index', int32Serializer),
        ('broker_ids', ArraySerializer(int32Serializer)),
    ],
    3: [
        ('partition_index', int32Serializer),
        ('broker_ids', ArraySerializer(int32Serializer)),
    ],
}


assignmentSerializers: Dict[int, DataClassSerializer[Assignment]] = {
    version: DataClassSerializer(Assignment, schema) for version, schema
    in assignmentSchemas.items()
}


topicSchemas: Dict[int, Schema] = {
    0: [
        ('name', stringSerializer),
        ('num_partitions', int32Serializer),
        ('replication_factor', int16Serializer),
        ('assignments', ArraySerializer(assignmentSerializers[0])),
        ('configs', ArraySerializer(configSerializers[0])),
    ],
    1: [
        ('name', stringSerializer),
        ('num_partitions', int32Serializer),
        ('replication_factor', int16Serializer),
        ('assignments', ArraySerializer(assignmentSerializers[1])),
        ('configs', ArraySerializer(configSerializers[1])),
    ],
    2: [
        ('name', stringSerializer),
        ('num_partitions', int32Serializer),
        ('replication_factor', int16Serializer),
        ('assignments', ArraySerializer(assignmentSerializers[2])),
        ('configs', ArraySerializer(configSerializers[2])),
    ],
    3: [
        ('name', stringSerializer),
        ('num_partitions', int32Serializer),
        ('replication_factor', int16Serializer),
        ('assignments', ArraySerializer(assignmentSerializers[3])),
        ('configs', ArraySerializer(configSerializers[3])),
    ],
}


topicSerializers: Dict[int, DataClassSerializer[Topic]] = {
    version: DataClassSerializer(Topic, schema) for version, schema
    in topicSchemas.items()
}


createTopicsRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ('topics', ArraySerializer(topicSerializers[0])),
        ('timeout_ms', int32Serializer),
        ('validate_only', DummySerializer(booleanSerializer.default)),
    ],
    1: [
        ('topics', ArraySerializer(topicSerializers[1])),
        ('timeout_ms', int32Serializer),
        ('validate_only', booleanSerializer),
    ],
    2: [
        ('topics', ArraySerializer(topicSerializers[2])),
        ('timeout_ms', int32Serializer),
        ('validate_only', booleanSerializer),
    ],
    3: [
        ('topics', ArraySerializer(topicSerializers[3])),
        ('timeout_ms', int32Serializer),
        ('validate_only', booleanSerializer),
    ],
}


createTopicsRequestDataSerializers: Dict[int, DataClassSerializer[CreateTopicsRequestData]] = {
    version: DataClassSerializer(CreateTopicsRequestData, schema) for version, schema
    in createTopicsRequestDataSchemas.items()
}

