###############################################################
# Autogenerated module. Please don't modify.                  #
# Edit according file in protocol_generator/templates instead #
###############################################################

from typing import Dict

from ...structs.api.describe_configs_response import ConfigEntry, ConfigSynonym, DescribeConfigsResponseData, Resource
from ._main_serializers import (
    ArraySerializer,
    ClassSerializer,
    DummySerializer,
    Schema,
    booleanSerializer,
    errorCodeSerializer,
    int8Serializer,
    int32Serializer,
    nullableStringSerializer,
    resourceTypeSerializer,
    stringSerializer,
)

configSynonymSchemas: Dict[int, Schema] = {
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
}


configSynonymSerializers: Dict[int, ClassSerializer[ConfigSynonym]] = {
    version: ClassSerializer(ConfigSynonym, schema) for version, schema in configSynonymSchemas.items()
}

configSynonymSerializers[-1] = configSynonymSerializers[2]


configEntrySchemas: Dict[int, Schema] = {
    0: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        (None, booleanSerializer),
        ("is_sensitive", booleanSerializer),
        ("config_source", DummySerializer(int8Serializer.default)),
        ("config_synonyms", DummySerializer(ArraySerializer(configSynonymSerializers[-1]).default)),
    ],
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymSerializers[1])),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymSerializers[2])),
    ],
}


configEntrySerializers: Dict[int, ClassSerializer[ConfigEntry]] = {
    version: ClassSerializer(ConfigEntry, schema) for version, schema in configEntrySchemas.items()
}

configEntrySerializers[-1] = configEntrySerializers[2]


resourceSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[0])),
    ],
    1: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[1])),
    ],
    2: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[2])),
    ],
}


resourceSerializers: Dict[int, ClassSerializer[Resource]] = {
    version: ClassSerializer(Resource, schema) for version, schema in resourceSchemas.items()
}

resourceSerializers[-1] = resourceSerializers[2]


describeConfigsResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourceSerializers[0]))],
    1: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourceSerializers[1]))],
    2: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourceSerializers[2]))],
}


describeConfigsResponseDataSerializers: Dict[int, ClassSerializer[DescribeConfigsResponseData]] = {
    version: ClassSerializer(DescribeConfigsResponseData, schema)
    for version, schema in describeConfigsResponseDataSchemas.items()
}

describeConfigsResponseDataSerializers[-1] = describeConfigsResponseDataSerializers[2]
