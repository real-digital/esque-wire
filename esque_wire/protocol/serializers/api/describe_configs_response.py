##############################################
# Autogenerated module. Please don't modify. #
##############################################

from typing import Dict
from ...structs.api.describe_configs_response import (
    ConfigEntry,
    ConfigSynonym,
    DescribeConfigsResponseData,
    Resource,
)

from ._main_serializers import (
    ArraySerializer,
    DataClassSerializer,
    DummySerializer,
    Schema,
    booleanSerializer,
    errorCodeSerializer,
    int32Serializer,
    int8Serializer,
    nullableStringSerializer,
    resourceTypeSerializer,
    stringSerializer,
)


configSynonymSchemas: Dict[int, Schema] = {
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
}


configSynonymSerializers: Dict[int, DataClassSerializer[ConfigSynonym]] = {
    version: DataClassSerializer(ConfigSynonym, schema)
    for version, schema in configSynonymSchemas.items()
}


configEntrySchemas: Dict[int, Schema] = {
    0: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        (None, booleanSerializer),
        ("is_sensitive", booleanSerializer),
        ("config_source", DummySerializer(int8Serializer.default)),
        (
            "config_synonyms",
            DummySerializer(ArraySerializer(configSynonymSerializers[0]).default),
        ),
    ],
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymSerializers[1])),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymSerializers[2])),
    ],
}


configEntrySerializers: Dict[int, DataClassSerializer[ConfigEntry]] = {
    version: DataClassSerializer(ConfigEntry, schema)
    for version, schema in configEntrySchemas.items()
}


resourceSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[0])),
    ],
    1: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[1])),
    ],
    2: [
        ("error_code", errorCodeSerializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", resourceTypeSerializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntrySerializers[2])),
    ],
}


resourceSerializers: Dict[int, DataClassSerializer[Resource]] = {
    version: DataClassSerializer(Resource, schema)
    for version, schema in resourceSchemas.items()
}


describeConfigsResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("throttle_time_ms", int32Serializer),
        ("resources", ArraySerializer(resourceSerializers[0])),
    ],
    1: [
        ("throttle_time_ms", int32Serializer),
        ("resources", ArraySerializer(resourceSerializers[1])),
    ],
    2: [
        ("throttle_time_ms", int32Serializer),
        ("resources", ArraySerializer(resourceSerializers[2])),
    ],
}


describeConfigsResponseDataSerializers: Dict[
    int, DataClassSerializer[DescribeConfigsResponseData]
] = {
    version: DataClassSerializer(DescribeConfigsResponseData, schema)
    for version, schema in describeConfigsResponseDataSchemas.items()
}
