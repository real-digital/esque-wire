##############################################
# Autogenerated module. Please don't modify. #
##############################################

from typing import Dict
from esque_wire.protocol.structs.offset_for_leader_epoch_request import (
    OffsetForLeaderEpochRequestData,
    Partition,
    Topic,
)

from esque_wire.protocol.serializers import (
    ArraySerializer,
    DataClassSerializer,
    DummySerializer,
    Schema,
    int32Serializer,
    stringSerializer,
)


partitionSchemas: Dict[int, Schema] = {
    0: [
        ('partition', int32Serializer),
        ('leader_epoch', int32Serializer),
        ('current_leader_epoch', DummySerializer(int32Serializer.default)),
    ],
    1: [
        ('partition', int32Serializer),
        ('leader_epoch', int32Serializer),
        ('current_leader_epoch', DummySerializer(int32Serializer.default)),
    ],
    2: [
        ('partition', int32Serializer),
        ('current_leader_epoch', int32Serializer),
        ('leader_epoch', int32Serializer),
    ],
    3: [
        ('partition', int32Serializer),
        ('current_leader_epoch', int32Serializer),
        ('leader_epoch', int32Serializer),
    ],
}


partitionSerializers: Dict[int, DataClassSerializer[Partition]] = {
    version: DataClassSerializer(Partition, schema) for version, schema
    in partitionSchemas.items()
}


topicSchemas: Dict[int, Schema] = {
    0: [
        ('topic', stringSerializer),
        ('partitions', ArraySerializer(partitionSerializers[0])),
    ],
    1: [
        ('topic', stringSerializer),
        ('partitions', ArraySerializer(partitionSerializers[1])),
    ],
    2: [
        ('topic', stringSerializer),
        ('partitions', ArraySerializer(partitionSerializers[2])),
    ],
    3: [
        ('topic', stringSerializer),
        ('partitions', ArraySerializer(partitionSerializers[3])),
    ],
}


topicSerializers: Dict[int, DataClassSerializer[Topic]] = {
    version: DataClassSerializer(Topic, schema) for version, schema
    in topicSchemas.items()
}


offsetForLeaderEpochRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ('topics', ArraySerializer(topicSerializers[0])),
        ('replica_id', DummySerializer(int32Serializer.default)),
    ],
    1: [
        ('topics', ArraySerializer(topicSerializers[1])),
        ('replica_id', DummySerializer(int32Serializer.default)),
    ],
    2: [
        ('topics', ArraySerializer(topicSerializers[2])),
        ('replica_id', DummySerializer(int32Serializer.default)),
    ],
    3: [
        ('replica_id', int32Serializer),
        ('topics', ArraySerializer(topicSerializers[3])),
    ],
}


offsetForLeaderEpochRequestDataSerializers: Dict[int, DataClassSerializer[OffsetForLeaderEpochRequestData]] = {
    version: DataClassSerializer(OffsetForLeaderEpochRequestData, schema) for version, schema
    in offsetForLeaderEpochRequestDataSchemas.items()
}

