###############################################################
# Autogenerated module. Please don't modify.                  #
# Edit according file in protocol_generator/templates instead #
###############################################################

from typing import Dict

from ...structs.api.leader_and_isr_request import LeaderAndIsrRequestData, LiveLeader, PartitionState, TopicState
from ._main_serializers import (
    ArraySerializer,
    ClassSerializer,
    DummySerializer,
    Schema,
    booleanSerializer,
    int32Serializer,
    int64Serializer,
    stringSerializer,
)

liveLeaderSchemas: Dict[int, Schema] = {
    0: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
    1: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
    2: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
}


liveLeaderSerializers: Dict[int, ClassSerializer[LiveLeader]] = {
    version: ClassSerializer(LiveLeader, schema) for version, schema in liveLeaderSchemas.items()
}

liveLeaderSerializers[-1] = liveLeaderSerializers[2]


partitionStateSchemas: Dict[int, Schema] = {
    0: [
        (None, stringSerializer),
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", DummySerializer(booleanSerializer.default)),
    ],
    1: [
        (None, stringSerializer),
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", booleanSerializer),
    ],
    2: [
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", booleanSerializer),
    ],
}


partitionStateSerializers: Dict[int, ClassSerializer[PartitionState]] = {
    version: ClassSerializer(PartitionState, schema) for version, schema in partitionStateSchemas.items()
}

partitionStateSerializers[-1] = partitionStateSerializers[2]


topicStateSchemas: Dict[int, Schema] = {
    2: [("topic", stringSerializer), ("partition_states", ArraySerializer(partitionStateSerializers[2]))]
}


topicStateSerializers: Dict[int, ClassSerializer[TopicState]] = {
    version: ClassSerializer(TopicState, schema) for version, schema in topicStateSchemas.items()
}

topicStateSerializers[-1] = topicStateSerializers[2]


leaderAndIsrRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        (None, ArraySerializer(partitionStateSerializers[0])),
        ("live_leaders", ArraySerializer(liveLeaderSerializers[0])),
        ("broker_epoch", DummySerializer(int64Serializer.default)),
        ("topic_states", DummySerializer(ArraySerializer(topicStateSerializers[-1]).default)),
    ],
    1: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        (None, ArraySerializer(partitionStateSerializers[1])),
        ("live_leaders", ArraySerializer(liveLeaderSerializers[1])),
        ("broker_epoch", DummySerializer(int64Serializer.default)),
        ("topic_states", DummySerializer(ArraySerializer(topicStateSerializers[-1]).default)),
    ],
    2: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("broker_epoch", int64Serializer),
        ("topic_states", ArraySerializer(topicStateSerializers[2])),
        ("live_leaders", ArraySerializer(liveLeaderSerializers[2])),
    ],
}


leaderAndIsrRequestDataSerializers: Dict[int, ClassSerializer[LeaderAndIsrRequestData]] = {
    version: ClassSerializer(LeaderAndIsrRequestData, schema)
    for version, schema in leaderAndIsrRequestDataSchemas.items()
}

leaderAndIsrRequestDataSerializers[-1] = leaderAndIsrRequestDataSerializers[2]
