###############################################################
# Autogenerated module. Please don't modify.                  #
# Edit according file in protocol_generator/templates instead #
###############################################################

from typing import Dict

from ...structs.api.produce_request import Data, ProduceRequestData, TopicData
from ._main_serializers import (
    ArraySerializer,
    ClassSerializer,
    DummySerializer,
    Schema,
    int16Serializer,
    int32Serializer,
    nullableBytesSerializer,
    nullableStringSerializer,
    stringSerializer,
)

dataSchemas: Dict[int, Schema] = {
    0: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    1: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    2: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    3: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    4: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    5: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    6: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
    7: [("partition", int32Serializer), ("record_set", nullableBytesSerializer)],
}


dataSerializers: Dict[int, ClassSerializer[Data]] = {
    version: ClassSerializer(Data, schema) for version, schema in dataSchemas.items()
}

dataSerializers[-1] = dataSerializers[7]


topicDataSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[0]))],
    1: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[1]))],
    2: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[2]))],
    3: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[3]))],
    4: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[4]))],
    5: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[5]))],
    6: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[6]))],
    7: [("topic", stringSerializer), ("data", ArraySerializer(dataSerializers[7]))],
}


topicDataSerializers: Dict[int, ClassSerializer[TopicData]] = {
    version: ClassSerializer(TopicData, schema) for version, schema in topicDataSchemas.items()
}

topicDataSerializers[-1] = topicDataSerializers[7]


produceRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[0])),
        ("transactional_id", DummySerializer(nullableStringSerializer.default)),
    ],
    1: [
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[1])),
        ("transactional_id", DummySerializer(nullableStringSerializer.default)),
    ],
    2: [
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[2])),
        ("transactional_id", DummySerializer(nullableStringSerializer.default)),
    ],
    3: [
        ("transactional_id", nullableStringSerializer),
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[3])),
    ],
    4: [
        ("transactional_id", nullableStringSerializer),
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[4])),
    ],
    5: [
        ("transactional_id", nullableStringSerializer),
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[5])),
    ],
    6: [
        ("transactional_id", nullableStringSerializer),
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[6])),
    ],
    7: [
        ("transactional_id", nullableStringSerializer),
        ("acks", int16Serializer),
        ("timeout", int32Serializer),
        ("topic_data", ArraySerializer(topicDataSerializers[7])),
    ],
}


produceRequestDataSerializers: Dict[int, ClassSerializer[ProduceRequestData]] = {
    version: ClassSerializer(ProduceRequestData, schema) for version, schema in produceRequestDataSchemas.items()
}

produceRequestDataSerializers[-1] = produceRequestDataSerializers[7]
