###############################################################
# Autogenerated module. Please don't modify.                  #
# Edit according file in protocol_generator/templates instead #
###############################################################

from typing import Dict

from ...structs.api.metadata_response import Broker, MetadataResponseData, Partition, Topic
from ._main_serializers import (
    ArraySerializer,
    ClassSerializer,
    DummySerializer,
    Schema,
    booleanSerializer,
    errorCodeSerializer,
    int32Serializer,
    nullableStringSerializer,
    stringSerializer,
)

partitionSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
        ("offline_replicas", DummySerializer(ArraySerializer(int32Serializer).default)),
    ],
    1: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
        ("offline_replicas", DummySerializer(ArraySerializer(int32Serializer).default)),
    ],
    2: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
        ("offline_replicas", DummySerializer(ArraySerializer(int32Serializer).default)),
    ],
    3: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
        ("offline_replicas", DummySerializer(ArraySerializer(int32Serializer).default)),
    ],
    4: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
        ("offline_replicas", DummySerializer(ArraySerializer(int32Serializer).default)),
    ],
    5: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
    ],
    6: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int32Serializer.default)),
    ],
    7: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
    ],
    8: [
        ("error_code", errorCodeSerializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
    ],
}


partitionSerializers: Dict[int, ClassSerializer[Partition]] = {
    version: ClassSerializer(Partition, schema) for version, schema in partitionSchemas.items()
}

partitionSerializers[-1] = partitionSerializers[8]


topicSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("partitions", ArraySerializer(partitionSerializers[0])),
        ("is_internal", DummySerializer(booleanSerializer.default)),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    1: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[1])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    2: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[2])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    3: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[3])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    4: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[4])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    5: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[5])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    6: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[6])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    7: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[7])),
        ("topic_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    8: [
        ("error_code", errorCodeSerializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionSerializers[8])),
        ("topic_authorized_operations", int32Serializer),
    ],
}


topicSerializers: Dict[int, ClassSerializer[Topic]] = {
    version: ClassSerializer(Topic, schema) for version, schema in topicSchemas.items()
}

topicSerializers[-1] = topicSerializers[8]


brokerSchemas: Dict[int, Schema] = {
    0: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", DummySerializer(nullableStringSerializer.default)),
    ],
    1: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    2: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    3: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    4: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    5: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    6: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    7: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    8: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
}


brokerSerializers: Dict[int, ClassSerializer[Broker]] = {
    version: ClassSerializer(Broker, schema) for version, schema in brokerSchemas.items()
}

brokerSerializers[-1] = brokerSerializers[8]


metadataResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("brokers", ArraySerializer(brokerSerializers[0])),
        ("topics", ArraySerializer(topicSerializers[0])),
        ("throttle_time_ms", DummySerializer(int32Serializer.default)),
        ("cluster_id", DummySerializer(nullableStringSerializer.default)),
        ("controller_id", DummySerializer(int32Serializer.default)),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    1: [
        ("brokers", ArraySerializer(brokerSerializers[1])),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[1])),
        ("throttle_time_ms", DummySerializer(int32Serializer.default)),
        ("cluster_id", DummySerializer(nullableStringSerializer.default)),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    2: [
        ("brokers", ArraySerializer(brokerSerializers[2])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[2])),
        ("throttle_time_ms", DummySerializer(int32Serializer.default)),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    3: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[3])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[3])),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    4: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[4])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[4])),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    5: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[5])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[5])),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    6: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[6])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[6])),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    7: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[7])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[7])),
        ("cluster_authorized_operations", DummySerializer(int32Serializer.default)),
    ],
    8: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokerSerializers[8])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicSerializers[8])),
        ("cluster_authorized_operations", int32Serializer),
    ],
}


metadataResponseDataSerializers: Dict[int, ClassSerializer[MetadataResponseData]] = {
    version: ClassSerializer(MetadataResponseData, schema) for version, schema in metadataResponseDataSchemas.items()
}

metadataResponseDataSerializers[-1] = metadataResponseDataSerializers[8]
